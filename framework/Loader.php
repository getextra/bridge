<?php

if (!defined('ABSPATH'))
	exit;

final class Bridge_Loader {

	protected $includes = [
		'Annotation/Model',
		'Annotation/Service',
		'Annotation/Property',
		'Annotation/Element',
		'Annotation/Route',
		'Annotation/Middleware',
		'Builder/MenuBuilder',
		'Cache/Cache',
		'Control/Control',
		'Control/Input',
		'Control/Text',
		'Control/Textarea',
		'Control/Select',
		'Control/Checkbox',
		'Controller/Controller',
		'Controller/AdminController',
		'Controller/AuthController',
		'Controller/MemberController',
		'Controller/ApiController',
		'Controller/OptionController',
		'Middleware/Middleware',
		'Middleware/AdminMiddleware',
		'Middleware/MemberMiddleware',
		'Middleware/ApiMiddleware',
		'Middleware/AuthMiddleware',
		'Middleware/EditorMiddleware',
		'Middleware/ModeratorMiddleware',
		'Helper/DB',
		'Helper/Reader',
		'Model/Model',
		'Model/Comment',
		'Model/CommentMeta',
		'Model/Link',
		'Model/Option',
		'Model/Post',
		'Model/PostMeta',
		'Model/Site',
		'Model/Term',
		'Model/TermMeta',
		'Model/TermTaxonomy',
		'Model/User',
		'Model/UserMeta',
		'Model/PostType',
		'Model/Taxonomy',
		'Object/CollectionInterface',
		'Object/BaseObject',
		'Object/BaseCollection',
		'Object/Comment',
		'Object/CommentCollection',
		'Object/Element',
		'Object/ElementCollection',
		'Object/MenuItem',
		'Object/Menu',
		'Object/Pagination',
		'Object/Post',
		'Object/PostCollection',
		'Object/PostPagination',
		'Object/Route',
		'Object/RouteCollection',
		'Object/Schema',
		'Object/SchemaCollection',
		'Object/Site',
		'Object/SiteCollection',
		'Object/Term',
		'Object/TermCollection',
		'Object/User',
		'Object/UserCollection',
		'Object/RawMenuItem',
		'Persistent/PersistentInterface',
		'Persistent/Persistent',
		'Persistent/CommentPersistent',
		'Persistent/CommentMetaPersistent',
		'Persistent/LinkPersistent',
		'Persistent/OptionPersistent',
		'Persistent/PostPersistent',
		'Persistent/PostMetaPersistent',
		'Persistent/SitePersistent',
		'Persistent/TermPersistent',
		'Persistent/TermMetaPersistent',
		'Persistent/TermTaxonomyPersistent',
		'Persistent/UserPersistent',
		'Persistent/UserMetaPersistent',
		'Persistent/CustomPersistent',
		'Repository/RepositoryInterface',
		'Repository/Repository',
		'Repository/ElementRepository',
		'Repository/MetadataRepository',
		'Repository/CommentRepository',
		'Repository/CommentMetaRepository',
		'Repository/LinkRepository',
		'Repository/OptionRepository',
		'Repository/PostRepository',
		'Repository/PostMetaRepository',
		'Repository/SiteRepository',
		'Repository/TermRepository',
		'Repository/TermMetaRepository',
		'Repository/TermTaxonomyRepository',
		'Repository/UserRepository',
		'Repository/UserMetaRepository',
		'Repository/CustomRepository',
		'Repository/ServiceRepository',
		'Repository/WidgetRepository',
		'Repository/MenuRepository',
		'Repository/SchemaRepository',
		'Repository/BlockRepository',
		'Repository/HeaderRepository',
		'Repository/FooterRepository',
		'Repository/PopupRepository',
		'Repository/RouteRepository',
		'Repository/RouteApiRepository',
		'Repository/MiddlewareRepository',
		'Router/RouteCollection',
		'Router/Router',
		'Service/ElementGateway',
		'Service/MetadataGateway',
		'Service/PersistGateway',
		'Service/QueryGateway',
		'Service/RepositoryGateway',
		'Service/PersistentGateway',
		'Template/Twig_Function',
		'Template/Twig_Extension',
		'Template/Filesystem',
		'Template/Environtment',
		'Template/Twig',
		'Template/Element/Header',
		'Template/Element/Footer',
		'Template/Element/Block',
		'Template/Element/Popup',
		'Template/Form/Form',
		'Storage/Metadata',
		'Storage/Element',
		'Storage/Route',
		'HttpListener',
		'Form',
		'Container',
		'Control',
		'Element',
		'Metadata',
		'Persist',
		'Query',
		'Repository',
		'Persistent',
		'Storage',
		'Template',
		'Bridge',
		'Kernel'
	];
	protected function constants() {
		define( 'BRIDGE_VERSION', '1.0.0.0' );
	}

	public function init() {
		$this->constants();
		foreach ( $this->includes as $include ) {
			$this->require_file( dirname( __FILE__ ) . "/$include.php" );
		}
	} 

	protected function filename($path) {
		return basename($path);  
	}
	protected function require_file( $file ) {
		if ( file_exists( $file ) ) {
			require_once $file;
			return true;
		}
		return false;
	}
}


